{"ast":null,"code":"var _jsxFileName = \"D:\\\\user\\\\CFBF-main\\\\blood-donation-management\\\\client\\\\src\\\\components\\\\ui\\\\OTPInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport logger from '../../utils/logger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OTPInput = ({\n  length = 6,\n  value = '',\n  onChange,\n  onComplete,\n  disabled = false,\n  error = '',\n  success = '',\n  autoFocus = true,\n  className = ''\n}) => {\n  _s();\n  const [otp, setOtp] = useState(Array(length).fill(''));\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    logger.componentMount('OTPInput', {\n      length,\n      autoFocus,\n      disabled\n    });\n\n    // Initialize refs array\n    inputRefs.current = inputRefs.current.slice(0, length);\n\n    // Auto-focus first input if enabled\n    if (autoFocus && !disabled && inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n    return () => {\n      logger.componentUnmount('OTPInput');\n    };\n  }, [length, autoFocus, disabled]);\n  useEffect(() => {\n    // Update internal state when value prop changes\n    if (value !== otp.join('')) {\n      const newOtp = value.split('').slice(0, length);\n      while (newOtp.length < length) {\n        newOtp.push('');\n      }\n      setOtp(newOtp);\n      logger.debug(`OTP value updated from props: ${value}`, 'OTP_INPUT');\n    }\n  }, [value, length]);\n  useEffect(() => {\n    // Call onChange when OTP changes\n    const otpString = otp.join('');\n    if (onChange) {\n      onChange(otpString);\n    }\n\n    // Call onComplete when OTP is fully entered\n    if (otpString.length === length && onComplete) {\n      logger.ui('COMPLETE', 'OTPInput', {\n        otp: otpString\n      }, 'OTP_INPUT');\n      onComplete(otpString);\n    }\n  }, [otp, onChange, onComplete, length]);\n  const handleChange = (index, value) => {\n    // Only allow numeric input\n    if (!/^\\d*$/.test(value)) {\n      logger.debug(`Non-numeric input rejected: ${value}`, 'OTP_INPUT');\n      return;\n    }\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1); // Take only the last character\n    setOtp(newOtp);\n    logger.ui('CHANGE', 'OTPInput', {\n      index,\n      value: value.slice(-1)\n    }, 'OTP_INPUT');\n\n    // Auto-focus next input\n    if (value && index < length - 1) {\n      var _inputRefs$current;\n      (_inputRefs$current = inputRefs.current[index + 1]) === null || _inputRefs$current === void 0 ? void 0 : _inputRefs$current.focus();\n    }\n  };\n  const handleKeyDown = (index, e) => {\n    logger.ui('KEYDOWN', 'OTPInput', {\n      index,\n      key: e.key\n    }, 'OTP_INPUT');\n    if (e.key === 'Backspace') {\n      if (!otp[index] && index > 0) {\n        var _inputRefs$current2;\n        // If current input is empty, move to previous input\n        (_inputRefs$current2 = inputRefs.current[index - 1]) === null || _inputRefs$current2 === void 0 ? void 0 : _inputRefs$current2.focus();\n      } else {\n        // Clear current input\n        const newOtp = [...otp];\n        newOtp[index] = '';\n        setOtp(newOtp);\n      }\n    } else if (e.key === 'ArrowLeft' && index > 0) {\n      var _inputRefs$current3;\n      (_inputRefs$current3 = inputRefs.current[index - 1]) === null || _inputRefs$current3 === void 0 ? void 0 : _inputRefs$current3.focus();\n    } else if (e.key === 'ArrowRight' && index < length - 1) {\n      var _inputRefs$current4;\n      (_inputRefs$current4 = inputRefs.current[index + 1]) === null || _inputRefs$current4 === void 0 ? void 0 : _inputRefs$current4.focus();\n    } else if (e.key === 'Enter') {\n      const otpString = otp.join('');\n      if (otpString.length === length && onComplete) {\n        logger.ui('ENTER_COMPLETE', 'OTPInput', {\n          otp: otpString\n        }, 'OTP_INPUT');\n        onComplete(otpString);\n      }\n    }\n  };\n  const handlePaste = e => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text/plain');\n    const pastedOtp = pastedData.replace(/\\D/g, '').slice(0, length);\n    logger.ui('PASTE', 'OTPInput', {\n      pastedData: pastedOtp\n    }, 'OTP_INPUT');\n    if (pastedOtp) {\n      var _inputRefs$current$fo;\n      const newOtp = Array(length).fill('');\n      for (let i = 0; i < pastedOtp.length; i++) {\n        newOtp[i] = pastedOtp[i];\n      }\n      setOtp(newOtp);\n\n      // Focus the next empty input or the last input\n      const nextEmptyIndex = newOtp.findIndex(digit => !digit);\n      const focusIndex = nextEmptyIndex !== -1 ? nextEmptyIndex : length - 1;\n      (_inputRefs$current$fo = inputRefs.current[focusIndex]) === null || _inputRefs$current$fo === void 0 ? void 0 : _inputRefs$current$fo.focus();\n    }\n  };\n  const handleFocus = index => {\n    var _inputRefs$current$in;\n    logger.ui('FOCUS', 'OTPInput', {\n      index\n    }, 'OTP_INPUT');\n    // Select all text when focusing\n    (_inputRefs$current$in = inputRefs.current[index]) === null || _inputRefs$current$in === void 0 ? void 0 : _inputRefs$current$in.select();\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: {\n      opacity: 0,\n      y: 20\n    },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.3,\n        staggerChildren: 0.05\n      }\n    }\n  };\n  const inputVariants = {\n    hidden: {\n      opacity: 0,\n      scale: 0.8\n    },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.2,\n        ease: 'easeOut'\n      }\n    }\n  };\n\n  // Dynamic styles based on state\n  const getInputStyles = index => {\n    let baseStyles = 'w-12 h-12 text-center text-xl font-semibold border-2 rounded-lg bg-white dark:bg-slate-800 text-slate-900 dark:text-white transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';\n    if (disabled) {\n      baseStyles += ' opacity-50 cursor-not-allowed bg-slate-100 dark:bg-slate-700';\n    } else if (error) {\n      baseStyles += ' border-red-500 focus:ring-red-500 focus:border-red-500';\n    } else if (success) {\n      baseStyles += ' border-green-500 focus:ring-green-500 focus:border-green-500';\n    } else if (otp[index]) {\n      baseStyles += ' border-primary-500 focus:ring-primary-500 focus:border-primary-500';\n    } else {\n      baseStyles += ' border-slate-300 dark:border-slate-600 focus:ring-primary-500 focus:border-primary-500';\n    }\n    return baseStyles;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `space-y-4 ${className}`,\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      variants: containerVariants,\n      initial: \"hidden\",\n      animate: \"visible\",\n      className: \"flex justify-center space-x-3\",\n      children: otp.map((digit, index) => /*#__PURE__*/_jsxDEV(motion.input, {\n        ref: el => inputRefs.current[index] = el,\n        variants: inputVariants,\n        type: \"text\",\n        inputMode: \"numeric\",\n        pattern: \"\\\\d*\",\n        maxLength: 1,\n        value: digit,\n        onChange: e => handleChange(index, e.target.value),\n        onKeyDown: e => handleKeyDown(index, e),\n        onPaste: handlePaste,\n        onFocus: () => handleFocus(index),\n        disabled: disabled,\n        className: getInputStyles(index),\n        \"aria-label\": `OTP digit ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), (error || success) && /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        y: -10\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      className: \"text-center\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-red-600 dark:text-red-400\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-green-600 dark:text-green-400\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-slate-500 dark:text-slate-400\",\n        children: [\"Enter the \", length, \"-digit code sent to your phone\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(OTPInput, \"a9JrwJDE3nUwKSmvhSzMceuKXgY=\");\n_c = OTPInput;\nexport default OTPInput;\nvar _c;\n$RefreshReg$(_c, \"OTPInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","motion","logger","jsxDEV","_jsxDEV","OTPInput","length","value","onChange","onComplete","disabled","error","success","autoFocus","className","_s","otp","setOtp","Array","fill","inputRefs","componentMount","current","slice","focus","componentUnmount","join","newOtp","split","push","debug","otpString","ui","handleChange","index","test","_inputRefs$current","handleKeyDown","e","key","_inputRefs$current2","_inputRefs$current3","_inputRefs$current4","handlePaste","preventDefault","pastedData","clipboardData","getData","pastedOtp","replace","_inputRefs$current$fo","i","nextEmptyIndex","findIndex","digit","focusIndex","handleFocus","_inputRefs$current$in","select","containerVariants","hidden","opacity","y","visible","transition","duration","staggerChildren","inputVariants","scale","ease","getInputStyles","baseStyles","children","div","variants","initial","animate","map","input","ref","el","type","inputMode","pattern","maxLength","target","onKeyDown","onPaste","onFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/user/CFBF-main/blood-donation-management/client/src/components/ui/OTPInput.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport logger from '../../utils/logger';\n\nconst OTPInput = ({\n  length = 6,\n  value = '',\n  onChange,\n  onComplete,\n  disabled = false,\n  error = '',\n  success = '',\n  autoFocus = true,\n  className = ''\n}) => {\n  const [otp, setOtp] = useState(Array(length).fill(''));\n  const inputRefs = useRef([]);\n\n  useEffect(() => {\n    logger.componentMount('OTPInput', { length, autoFocus, disabled });\n    \n    // Initialize refs array\n    inputRefs.current = inputRefs.current.slice(0, length);\n    \n    // Auto-focus first input if enabled\n    if (autoFocus && !disabled && inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n    \n    return () => {\n      logger.componentUnmount('OTPInput');\n    };\n  }, [length, autoFocus, disabled]);\n\n  useEffect(() => {\n    // Update internal state when value prop changes\n    if (value !== otp.join('')) {\n      const newOtp = value.split('').slice(0, length);\n      while (newOtp.length < length) {\n        newOtp.push('');\n      }\n      setOtp(newOtp);\n      logger.debug(`OTP value updated from props: ${value}`, 'OTP_INPUT');\n    }\n  }, [value, length]);\n\n  useEffect(() => {\n    // Call onChange when OTP changes\n    const otpString = otp.join('');\n    if (onChange) {\n      onChange(otpString);\n    }\n    \n    // Call onComplete when OTP is fully entered\n    if (otpString.length === length && onComplete) {\n      logger.ui('COMPLETE', 'OTPInput', { otp: otpString }, 'OTP_INPUT');\n      onComplete(otpString);\n    }\n  }, [otp, onChange, onComplete, length]);\n\n  const handleChange = (index, value) => {\n    // Only allow numeric input\n    if (!/^\\d*$/.test(value)) {\n      logger.debug(`Non-numeric input rejected: ${value}`, 'OTP_INPUT');\n      return;\n    }\n\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1); // Take only the last character\n    setOtp(newOtp);\n\n    logger.ui('CHANGE', 'OTPInput', { index, value: value.slice(-1) }, 'OTP_INPUT');\n\n    // Auto-focus next input\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1]?.focus();\n    }\n  };\n\n  const handleKeyDown = (index, e) => {\n    logger.ui('KEYDOWN', 'OTPInput', { index, key: e.key }, 'OTP_INPUT');\n\n    if (e.key === 'Backspace') {\n      if (!otp[index] && index > 0) {\n        // If current input is empty, move to previous input\n        inputRefs.current[index - 1]?.focus();\n      } else {\n        // Clear current input\n        const newOtp = [...otp];\n        newOtp[index] = '';\n        setOtp(newOtp);\n      }\n    } else if (e.key === 'ArrowLeft' && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n    } else if (e.key === 'ArrowRight' && index < length - 1) {\n      inputRefs.current[index + 1]?.focus();\n    } else if (e.key === 'Enter') {\n      const otpString = otp.join('');\n      if (otpString.length === length && onComplete) {\n        logger.ui('ENTER_COMPLETE', 'OTPInput', { otp: otpString }, 'OTP_INPUT');\n        onComplete(otpString);\n      }\n    }\n  };\n\n  const handlePaste = (e) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text/plain');\n    const pastedOtp = pastedData.replace(/\\D/g, '').slice(0, length);\n    \n    logger.ui('PASTE', 'OTPInput', { pastedData: pastedOtp }, 'OTP_INPUT');\n\n    if (pastedOtp) {\n      const newOtp = Array(length).fill('');\n      for (let i = 0; i < pastedOtp.length; i++) {\n        newOtp[i] = pastedOtp[i];\n      }\n      setOtp(newOtp);\n\n      // Focus the next empty input or the last input\n      const nextEmptyIndex = newOtp.findIndex(digit => !digit);\n      const focusIndex = nextEmptyIndex !== -1 ? nextEmptyIndex : length - 1;\n      inputRefs.current[focusIndex]?.focus();\n    }\n  };\n\n  const handleFocus = (index) => {\n    logger.ui('FOCUS', 'OTPInput', { index }, 'OTP_INPUT');\n    // Select all text when focusing\n    inputRefs.current[index]?.select();\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.3,\n        staggerChildren: 0.05\n      }\n    }\n  };\n\n  const inputVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.2,\n        ease: 'easeOut'\n      }\n    }\n  };\n\n  // Dynamic styles based on state\n  const getInputStyles = (index) => {\n    let baseStyles = 'w-12 h-12 text-center text-xl font-semibold border-2 rounded-lg bg-white dark:bg-slate-800 text-slate-900 dark:text-white transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';\n    \n    if (disabled) {\n      baseStyles += ' opacity-50 cursor-not-allowed bg-slate-100 dark:bg-slate-700';\n    } else if (error) {\n      baseStyles += ' border-red-500 focus:ring-red-500 focus:border-red-500';\n    } else if (success) {\n      baseStyles += ' border-green-500 focus:ring-green-500 focus:border-green-500';\n    } else if (otp[index]) {\n      baseStyles += ' border-primary-500 focus:ring-primary-500 focus:border-primary-500';\n    } else {\n      baseStyles += ' border-slate-300 dark:border-slate-600 focus:ring-primary-500 focus:border-primary-500';\n    }\n\n    return baseStyles;\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"flex justify-center space-x-3\"\n      >\n        {otp.map((digit, index) => (\n          <motion.input\n            key={index}\n            ref={(el) => (inputRefs.current[index] = el)}\n            variants={inputVariants}\n            type=\"text\"\n            inputMode=\"numeric\"\n            pattern=\"\\d*\"\n            maxLength={1}\n            value={digit}\n            onChange={(e) => handleChange(index, e.target.value)}\n            onKeyDown={(e) => handleKeyDown(index, e)}\n            onPaste={handlePaste}\n            onFocus={() => handleFocus(index)}\n            disabled={disabled}\n            className={getInputStyles(index)}\n            aria-label={`OTP digit ${index + 1}`}\n          />\n        ))}\n      </motion.div>\n\n      {/* Error/Success Message */}\n      {(error || success) && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center\"\n        >\n          {error && (\n            <p className=\"text-sm text-red-600 dark:text-red-400\">\n              {error}\n            </p>\n          )}\n          {success && (\n            <p className=\"text-sm text-green-600 dark:text-green-400\">\n              {success}\n            </p>\n          )}\n        </motion.div>\n      )}\n\n      {/* Helper text */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n          Enter the {length}-digit code sent to your phone\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default OTPInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}