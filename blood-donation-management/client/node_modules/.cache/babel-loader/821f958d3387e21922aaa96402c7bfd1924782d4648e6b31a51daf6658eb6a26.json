{"ast":null,"code":"var _jsxFileName = \"D:\\\\user\\\\CFBF-main\\\\blood-donation-management\\\\client\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport logger from '../utils/logger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    logger.error('useTheme must be used within a ThemeProvider', 'THEME_CONTEXT');\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  logger.debug('Theme context accessed', 'THEME_CONTEXT');\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setTheme] = useState('light');\n\n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    logger.info('Initializing theme provider...', 'THEME_PROVIDER');\n    const savedTheme = localStorage.getItem('call-for-blood-theme');\n    if (savedTheme) {\n      logger.info(`Found saved theme: ${savedTheme}`, 'THEME_PROVIDER');\n      setTheme(savedTheme);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const systemTheme = prefersDark ? 'dark' : 'light';\n      logger.info(`No saved theme found, using system preference: ${systemTheme}`, 'THEME_PROVIDER');\n      setTheme(systemTheme);\n    }\n  }, []);\n\n  // Apply theme to document\n  useEffect(() => {\n    logger.theme('APPLY', theme, 'THEME_PROVIDER');\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n      logger.debug('Added dark class to document root', 'THEME_PROVIDER');\n    } else {\n      root.classList.remove('dark');\n      logger.debug('Removed dark class from document root', 'THEME_PROVIDER');\n    }\n    localStorage.setItem('call-for-blood-theme', theme);\n    logger.debug(`Theme saved to localStorage: ${theme}`, 'THEME_PROVIDER');\n  }, [theme]);\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    logger.theme('TOGGLE', `${theme} → ${newTheme}`, 'THEME_PROVIDER');\n    setTheme(newTheme);\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  };\n  logger.debug(`Theme provider value: ${JSON.stringify(value)}`, 'THEME_PROVIDER');\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"l0NnHMBAjTNA2m05PT0LPL3eOKc=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","logger","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","error","Error","debug","ThemeProvider","children","_s2","theme","setTheme","info","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","systemTheme","root","document","documentElement","classList","add","remove","setItem","toggleTheme","newTheme","value","isDark","JSON","stringify","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/user/CFBF-main/blood-donation-management/client/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport logger from '../utils/logger';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    logger.error('useTheme must be used within a ThemeProvider', 'THEME_CONTEXT');\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  logger.debug('Theme context accessed', 'THEME_CONTEXT');\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n\n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    logger.info('Initializing theme provider...', 'THEME_PROVIDER');\n    \n    const savedTheme = localStorage.getItem('call-for-blood-theme');\n    if (savedTheme) {\n      logger.info(`Found saved theme: ${savedTheme}`, 'THEME_PROVIDER');\n      setTheme(savedTheme);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const systemTheme = prefersDark ? 'dark' : 'light';\n      logger.info(`No saved theme found, using system preference: ${systemTheme}`, 'THEME_PROVIDER');\n      setTheme(systemTheme);\n    }\n  }, []);\n\n  // Apply theme to document\n  useEffect(() => {\n    logger.theme('APPLY', theme, 'THEME_PROVIDER');\n    \n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n      logger.debug('Added dark class to document root', 'THEME_PROVIDER');\n    } else {\n      root.classList.remove('dark');\n      logger.debug('Removed dark class from document root', 'THEME_PROVIDER');\n    }\n    \n    localStorage.setItem('call-for-blood-theme', theme);\n    logger.debug(`Theme saved to localStorage: ${theme}`, 'THEME_PROVIDER');\n  }, [theme]);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    logger.theme('TOGGLE', `${theme} → ${newTheme}`, 'THEME_PROVIDER');\n    setTheme(newTheme);\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  };\n\n  logger.debug(`Theme provider value: ${JSON.stringify(value)}`, 'THEME_PROVIDER');\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}